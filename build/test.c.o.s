;
; File generated by cc65 v 2.18 - Git cab4910
;
	.fopt		compiler,"cc65 v 2.18 - Git cab4910"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_palette
	.export		_map_0
	.export		_set_nt
	.export		_load_map
	.export		_load_palettes
	.export		_main

.segment	"RODATA"

_palette:
	.byte	$31
	.byte	$06
	.byte	$16
	.byte	$1A
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
_map_0:
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$00

; ---------------------------------------------------------------
; void __near__ set_nt (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_set_nt: near

.segment	"CODE"

	jsr     pusha
	jsr     decsp2
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     pushax
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	ldx     #$00
	jsr     shlax4
	jsr     shlax1
	jsr     tosaddax
	jsr     pushax
	ldx     #$20
	lda     #$00
	jsr     tosaddax
	ldy     #$00
	jsr     staxysp
	ldy     #$01
	jsr     ldaxysp
	txa
	ldx     #$00
	ldx     #$00
	sta     $2006
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	sta     $2006
	jsr     incsp4
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ load_map (__near__ const unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_map: near

.segment	"RODATA"

L0061:
	.word	$0000

.segment	"CODE"

	jsr     pushax
	lda     #$00
	jsr     pusha
	jsr     decsp3
	ldx     #$00
	lda     #$00
	sta     $2000
	ldx     #$00
	lda     #$00
	sta     $2001
	ldx     #$00
	lda     #$20
	sta     $2006
	ldx     #$00
	lda     #$00
	sta     $2006
	ldx     #$00
	lda     #$00
	ldy     #$02
	sta     (sp),y
L003E:	ldy     #$02
	ldx     #$00
	lda     (sp),y
	cmp     #$04
	jsr     boolult
	jne     L0041
	jmp     L003F
L0041:	ldx     #$00
	lda     #$00
	ldy     #$03
	sta     (sp),y
L0046:	ldy     #$03
	ldx     #$00
	lda     (sp),y
	cmp     #$F0
	jsr     boolult
	jne     L0049
	jmp     L0040
L0049:	ldx     #$00
	lda     #$FF
	sta     $2007
	ldy     #$03
	ldx     #$00
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	jmp     L0046
L0040:	ldy     #$02
	ldx     #$00
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	jmp     L003E
L003F:	ldx     #$00
	lda     #$00
	ldy     #$03
	sta     (sp),y
L0055:	jmp     L0058
L0057:	jmp     L0055
L0058:	ldy     #$05
	jsr     ldaxysp
	jsr     pushax
	ldy     #$05
	ldx     #$00
	lda     (sp),y
	jsr     tosaddax
	ldy     #$00
	jsr     ldauidx
	jmp     L005B
L005B:	cmp     #$00
	jeq     L005D
	cmp     #$01
	jeq     L0063
	jmp     L005D
L005D:	pha
	lda     L0061
	clc
	adc     sp
	sta     sp
	lda     L0061+1
	adc     sp+1
	sta     sp+1
	pla
	jmp     L0056
L0063:	ldy     #$05
	jsr     ldaxysp
	jsr     pushax
	ldy     #$05
	ldx     #$00
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	jsr     tosaddax
	ldy     #$00
	jsr     ldauidx
	ldy     #$02
	sta     (sp),y
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     asrax4
	ldx     #$00
	ldy     #$01
	sta     (sp),y
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	ldx     #$00
	and     #$0F
	ldx     #$00
	ldy     #$02
	sta     (sp),y
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     aslax1
	ldx     #$00
	jsr     pusha
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     aslax1
	ldx     #$00
	jsr     _set_nt
	ldx     #$00
	lda     #$00
	sta     $2007
	ldx     #$00
	lda     #$04
	sta     $2007
	ldy     #$05
	jsr     ldaxysp
	jsr     pushax
	ldy     #$05
	ldx     #$00
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	jsr     tosaddax
	ldy     #$00
	jsr     ldauidx
	ldy     #$00
	sta     (sp),y
	jmp     L007D
L007B:	ldx     #$00
	lda     #$04
	sta     $2007
	ldx     #$00
	lda     #$04
	sta     $2007
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	sec
	sbc     #$01
	sta     (sp),y
L007D:	ldy     #$00
	lda     (sp),y
	jne     L007B
	ldx     #$00
	lda     #$04
	sta     $2007
	ldx     #$00
	lda     #$01
	sta     $2007
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     aslax1
	ldx     #$00
	jsr     pusha
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     aslax1
	jsr     incax1
	ldx     #$00
	jsr     _set_nt
	ldx     #$00
	lda     #$02
	sta     $2007
	ldx     #$00
	lda     #$05
	sta     $2007
	ldy     #$05
	jsr     ldaxysp
	jsr     pushax
	ldy     #$05
	ldx     #$00
	lda     (sp),y
	jsr     tosaddax
	ldy     #$00
	jsr     ldauidx
	ldy     #$00
	sta     (sp),y
	jmp     L00A7
L00A5:	ldx     #$00
	lda     #$05
	sta     $2007
	ldx     #$00
	lda     #$05
	sta     $2007
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	sec
	sbc     #$01
	sta     (sp),y
L00A7:	ldy     #$00
	lda     (sp),y
	jne     L00A5
	ldx     #$00
	lda     #$05
	sta     $2007
	ldx     #$00
	lda     #$03
	sta     $2007
	ldy     #$03
	ldx     #$00
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	jmp     L005C
L005C:	jmp     L0057
L0056:	ldx     #$00
	lda     #$88
	sta     $2000
	ldx     #$00
	lda     #$1E
	sta     $2001
	jsr     incsp6
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ load_palettes (__near__ const unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_palettes: near

.segment	"CODE"

	jsr     pushax
	lda     #$00
	jsr     pusha
	ldx     #$00
	lda     #$3F
	sta     $2006
	ldx     #$00
	lda     #$00
	sta     $2006
	ldx     #$00
	lda     #$00
	ldy     #$00
	sta     (sp),y
L00D1:	ldy     #$00
	ldx     #$00
	lda     (sp),y
	cmp     #$20
	jsr     boolult
	jne     L00D4
	jmp     L00D2
L00D4:	ldy     #$02
	jsr     ldaxysp
	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     tosaddax
	ldy     #$00
	jsr     ldauidx
	sta     $2007
	ldy     #$00
	ldx     #$00
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	jmp     L00D1
L00D2:	jsr     incsp3
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	ldx     #$00
	lda     #$00
	sta     $2000
	ldx     #$00
	lda     #$00
	sta     $2001
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _load_palettes
	lda     #<(_map_0)
	ldx     #>(_map_0)
	jsr     _load_map
	ldx     #$00
	lda     #$88
	sta     $2000
	ldx     #$00
	lda     #$1E
	sta     $2001
L00EE:	jmp     L00F1
L00F0:	jmp     L00EE
L00F1:	jmp     L00F0
	rts

.endproc

